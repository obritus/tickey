<p class="m-0 fs-1">Adicionar empreendimento</p>
<p class="mb-3">Cidades e bairros cadastrados no banco de dados.</p>

{{>_empreendimento_form}}

<script>
	const Cidades = fetch('/api/cidades/')

	const GetBairro = cidade_id => {
		bairroForm.innerHTML = null //LIMPA A LISTA ATUAL
		const Bairro = fetch('/api/bairros/' + cidade_id)
		Bairro
			.then(response => response.json())
			.then(bairros => {
				if(bairros.length > 0) {
					bairros.map(({ _id, name }) => {
						const Render = `<option value="${_id}">${name}</option>`
						bairroForm.innerHTML += Render
					})
					bairroForm.value = bairroForm.options[0].value
				}
			})
	}

	const GetCidade = () => {
		Cidades
			.then(response => response.json())
			.then(cidades => {
				cidades.map(({ _id, name }) => {
					const Render = `<option value="${_id}">${name}</option>`
					cidadeForm.innerHTML += Render
				})
				cidadeForm.value = cidadeForm.options[0].value
				return GetBairro(cidadeForm.value)
			})
	}

	const GetImagens = async ({ _id, filename, empreendimento }, default_image) => {
		const imgUrl = `/images/empreendimentos/${empreendimento}/${filename}`

		const divImagem = document.createElement('div')
		const divRadio = document.createElement('input')
		const divLabel = document.createElement('label')
		const divP = document.createElement('p')
		const eraseButton = document.createElement('button')

		divRadio.type = 'radio'
		divRadio.name = 'default_image'
		divRadio.className = 'd-none'
		divRadio.id = _id
		divRadio.value = _id
		divRadio.setAttribute('form', 'form_empreendimento')

		divLabel.htmlFor = _id

		divImagem.className = 'image'
		eraseButton.dataset.id = _id
		eraseButton.className = 'btn-close erase_button'
		eraseButton.type = 'button'
		eraseButton.title = 'Excluir imagem'
		eraseButton.onclick = () => EraseImage(_id)
		divP.innerHTML = 'Carregando...'

		divImagem.appendChild(divP)
		divLabel.appendChild(divImagem)
		divLabel.appendChild(eraseButton)

		document.getElementById('uploaded').appendChild(divRadio)
		document.getElementById('uploaded').appendChild(divLabel)

		setTimeout(() => {
			divImagem.removeChild(divP)
			divImagem.style.backgroundImage = `url(${imgUrl})`
			if (default_image) {
				document.querySelector(`input[value="${default_image}"]`)
					.checked = true
			} else {
				document.querySelector(`input[name="default_image"]`)
					.checked = true
			}
		}, 2000)
	}

	const ShowImagesBox = () => {
		imagesBox.classList.add('show')
		imagesBox.scrollIntoView()
	}

	GetCidade()

	document.querySelector('#form_empreendimento')
		.addEventListener('submit', async function (e) {
			e.preventDefault()

			const DefaultImageCheck = () => {
				if (document.querySelector('input[name="default_image"]:checked')) {
					return document.querySelector('input[name="default_image"]:checked').value
				} else {
					return null
				}
			}
			const response =
				await new Response(
					new URLSearchParams(new FormData(e.target).entries())
				).text()

			fetch('/api/empreendimentos/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded'
				},
				body: response
			})
				.then(response => response.json())
				.then(data => {
					if(data._id) {
						sessionStorage.setItem('empreendimento_id', data._id)
						const BlockInputs = () => {
							const GetFormElements =
								document.querySelectorAll('form input, form textarea, form select')
							GetFormElements.forEach(e => e.disabled = true)
						}

						if (data.msg) {
							ShowMessage({ msg: data.msg, alertClass: 'bg-success' })
						}
						BlockInputs()
						ShowImagesBox()

						document.querySelector('#form_empreendimento .btn').innerText = 'Concluir'
						document.querySelector('#form_empreendimento')
							.addEventListener('submit', function (e) {
								e.preventDefault()
								fetch('/api/empreendimentos/' + data._id, {
									method: 'PUT',
									headers: { 'Content-Type': 'application/json' },
									body: JSON.stringify({ default_image: DefaultImageCheck() })
								})
									.then(response => response.json())
									.then(data => {
										console.log(data)
										ShowMessage({
											msg: 'Empreendimento adicionado',
											alertClass: 'bg-success'
										})
										document.querySelector('body')
											.scrollIntoView({ behavior: "smooth" })
									})
							})
					}
					if(data.err) {
						ShowMessage({ msg: data.err, alertClass: 'bg-danger' })
						document.querySelector('body')
							.scrollIntoView({ behavior: "smooth" })
					}
				})
				.catch(err => console.error(err))
		})

	cidadeForm.addEventListener('change', function (e) {GetBairro(this.value)})

	dropZone.ondragover = function () {
		this.classList.add('active')
		return false
	}
	dropZone.ondragleave = function () {
		this.classList.remove('active')
		return false
	}
	dropZone.ondrop = function (e) {
		this.classList.remove('active')
		const upload = files => {
			const data = new FormData()
			data.append('_id', sessionStorage.getItem('empreendimento_id'))

			for (x = 0; x < files.length; x++) {
				data.append('images', files[x])
			}

			fetch('/api/images', { method: 'POST', body: data })
				.then(response => response.json())
				.then(data => data.forEach(data => GetImagens(data)))
				.catch(err => console.error(err))
		}
		e.preventDefault()
		upload(e.dataTransfer.files)
	}

	categoriaForm.addEventListener('change', e => {
		const valor = e.target.value
		HideCategoria(valor)
	})
</script>